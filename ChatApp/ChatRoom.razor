@page "/chatroom"
@using Microsoft.AspNetCore.SignalR.Client;
@using ChatApp.Models;
@using Newtonsoft.Json;
@inject NavigationManager navigationManager

<h1>Blazor SignalR Chat</h1>
<hr />
<AuthorizeView>
    <Authorized>
        @if (!_isChatting)
        {
            <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Connect!</button>

            // Error messages
            @if (_message != null)
            {
                <div class="invalid-feedback">@_message</div>
                <small id="emailHelp" class="form-text text-muted">@_message</small>
            }
        }
        else
        {
            // banner to show current user
            <div class="alert alert-secondary mt-4" role="alert">
                <span class="oi oi-person mr-2" aria-hidden="true"></span>
                <span>You are connected as <b>@_username</b></span>
                <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
            </div>
            // display messages
            <div id="scrollbox">
                @foreach (var item in _messages)
                {
                    @if (item.IsNotice)
                    {
                        <div class="alert alert-info">@item.Body</div>
                    }
                    else
                    {
                        (string statusClassName, string dateClassName) = item.Mine ? ("text-left", "text-right") : ("text-right", "text-left");
                        string statusText = @item.IsReceived == 1 ? "Received" : "Send"; 
                        <div class="@item.CSS">
                            <div class="user">@item.Username</div>
                            <div class="msg">@item.Body</div>
                            <div class="@dateClassName text-danger">@item.Date</div>
                            <div class="@statusClassName">@statusText</div>                            
                        </div>
                    }
                }

                <hr />
                <textarea class="input-lg" placeholder="enter your comment" @onfocusin="@(() => ReceiveMessages())" @bind="@_newMessage"></textarea>
                <button class="btn btn-primary" @onclick="@(() => SendAsync(_newMessage))">Send</button>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        First you Must to Log in.
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }
    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username;

    private string _userId;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<MessageModel> _messages = new List<MessageModel>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    public async Task ReceiveMessages()
    {
        try
        {
            string messagesAsString = JsonConvert.SerializeObject(this._messages);

            await this._hubConnection.SendAsync("ReceiveMessages", messagesAsString, _userId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    public async Task Chat()
    {
        try
        {
            this._isChatting = true;
            this._username = authenticationStateTask.Result.User.Identity.Name;
            this._messages.Clear();

            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + ChatApp.Hubs.ChatHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl, options => options.UseDefaultCredentials = true)
                .Build();

            _hubConnection.On<string, string, string, int>("Broadcast", BroadcastMessage);

            _hubConnection.On<string, string, string>("Connect", Connect);

            _hubConnection.On<string>("ReceivedMessage", ReceivedMessage);

            _hubConnection.On<string>("SyncData", SyncData);

            await _hubConnection.StartAsync();

            await _hubConnection.SendAsync("Connect", _username);
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void ReceivedMessage(string msgAsString)
    {
        var messages = JsonConvert.DeserializeObject<ICollection<MessageModel>>(msgAsString);

        if (messages != null && messages.Any())
        {
            _messages.Clear();
            _messages.AddRange(messages);
        }
        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private void SyncData(string sync)
    {
        _hubConnection.SendAsync("SyncData", _userId);
    }

    private async Task Connect(string name, string userId, string messagesAsString)
    {
        try
        {
            var messages = JsonConvert.DeserializeObject<ICollection<MessageModel>>(messagesAsString);
            _username = name;
            _userId = userId;
            if (messages != null && messages.Any())
                _messages.AddRange(messages);

            await SendAsync($"[Notice] {_username} joined chat room.");

            StateHasChanged();
        }
        catch (Exception e)
        {

            Console.WriteLine(e.Message);
        }
    }

    private void BroadcastMessage(string name, string message, string date, int state)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new MessageModel(name, message, isMine, date, state));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room.");
            await _hubConnection.SendAsync("Disconnect", _userId);

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", _userId, message);

            _newMessage = string.Empty;
        }
    }
}